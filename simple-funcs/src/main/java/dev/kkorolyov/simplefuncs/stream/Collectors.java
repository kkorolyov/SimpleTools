package dev.kkorolyov.simplefuncs.stream;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.StringJoiner;
import java.util.function.Function;
import java.util.stream.Collector;

/**
 * Generates additional {@link Collector}s not found in the standard {@link java.util.stream.Collectors}.
 */
public final class Collectors {
	private Collectors() {}

	/**
	 * Returns a collector which concatenates elements into a string.
	 * If there were no elements to collect, the result is {@code ""}, instead of the standard {@code prefix + suffix}.
	 * @param delimiter delimiter between elements
	 * @param prefix prefix appended at the start of all elements
	 * @param suffix suffix appended at the end of all elements
	 * @return collector which concatenates elements into a string and defaults to {@code ""} if no non-empty elements concatenated
	 */
	public static Collector<CharSequence, ?, String> joiningDefaultEmpty(String delimiter, String prefix, String suffix) {
		return Collector.of(
				() -> new StringJoiner(delimiter, prefix, suffix),
				StringJoiner::add,
				StringJoiner::merge,
				joiner -> joiner.length() > (prefix.length() + suffix.length())
						? joiner.toString()
						: ""
		);
	}

	/**
	 * Returns a collector which collects elements into an immutable map of elements keyed by the result of applying the provided mapping function on it.
	 * @param keyMapper generates key for each element, invoked with the current collected element
	 * @param <T> element type
	 * @param <K> key type
	 * @return collector which collects elements into map with keys generated by {@code keyMapper}
	 * @throws IllegalStateException if multiple elements are mapped to the same key
	 */
	public static <T, K> Collector<T, ?, Map<K, T>> keyedOn(Function<T, K> keyMapper) {
		return Collector.of(
				HashMap::new,
				(map, element) -> {
					K key = keyMapper.apply(element);
					if (map.put(key, element) != null) throw new IllegalStateException("Multiple elements map to key: " + key);
				},
				(map, map1) -> {
					map.putAll(map1);
					return map;
				},
				(Function<Map<K, T>, Map<K, T>>) Collections::unmodifiableMap
		);
	}
}
